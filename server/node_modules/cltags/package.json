{
  "name": "cltags",
  "description": "Lightweight library for parsing process.argv",
  "version": "0.0.2",
  "author": {
    "name": "Gabriel Manricks",
    "email": "gmanricks@gmail.com"
  },
  "devDependencies": {
    "mocha": "*",
    "chai": "*"
  },
  "keywords": [
    "cli",
    "argv"
  ],
  "main": "cltags",
  "readme": "ClTags\n======\n\nA Lightweight Node.JS module for parsing process.argv\n\n### Code Example\n\n```js\nvar tags = require(\"cltags\");\nvar options = tags.parse(process.argv);\n```\n\nThats really all their is to it, so for example if you ran your script with: \n\n```\nnode script_name search --recursive --filetype=\"js\" demo search query\n```\n\nYou would get back from the `tags.parse` command an object that looks like:\n\n```js\n{\n  command: \"search\",\n  filetype: \"js\",\n  recursive: true,\n  query: \"demo search query\"\n}\n```\n\n### Other features\n\n- **Defaults** - the second parameter is an optional list of defaults which will get returned in the object unless overridden\n- **Short Formed Tags** - the third parameter is a list of replacements for short tags\n\nAll together it would look something like the following:\n\n```js\nvar tags = require(\"cltags\");\n\nvar defaults = {\n  depth: 2,\n  recursive: false\n}\n\nvar replacements = {\n  d: \"depth\",\n  r: \"recursive\"\n}\n\nvar options = tags.parse(process.argv, defaults, replacements);\n```\n\nYou can then run something like: \n\n```\nscript_name -r\n```\n\nand get back an object like:\n\n```js\n{\n  command: \"\",\n  query: \"\",\n  depth: 2,\n  recursive: true\n}\n```\n",
  "readmeFilename": "README.md",
  "_id": "cltags@0.0.2",
  "dist": {
    "shasum": "38c7953d64b24733989407d60a8eab58fe7297fb"
  },
  "_from": "cltags@",
  "_resolved": "https://registry.npmjs.org/cltags/-/cltags-0.0.2.tgz"
}
